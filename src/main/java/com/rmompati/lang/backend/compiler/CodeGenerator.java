package com.rmompati.lang.backend.compiler;

import com.rmompati.lang.backend.Backend;
import com.rmompati.lang.intermediate.ICode;
import com.rmompati.lang.intermediate.SymTabStack;
import com.rmompati.lang.message.Message;
import com.rmompati.lang.message.MessageListener;
import com.rmompati.lang.message.MessageType;

/**
 * <h1>CodeGenerator</h1>
 *
 * <p>The backend component for processing the source program and generating machine-code.</p>
 */
public class CodeGenerator extends Backend {

  /**
   * Process the intermediate code and the symbol table generated by the parser to
   * generate machine-language instructions.
   *
   * @param iCode    the intermediate code.
   * @param symTabStack the symbol table stack.
   * @throws Exception if an exception occurs.
   */
  @Override
  public void process(ICode iCode, SymTabStack symTabStack) throws Exception {
    long startTime = System.currentTimeMillis();
    float elapsedTime = (System.currentTimeMillis() - startTime) / 1000f;
    int instructionCount = 0;

    // Send the compiler summary.
    sendMessage(new Message(MessageType.COMPILER_SUMMARY, new Number[]{instructionCount, elapsedTime}));
  }

  /**
   * Adds a lister to the listener list.
   *
   * @param listener the listener to add.
   */
  @Override
  public void addMessageListener(MessageListener listener) {
    messageHandler.addListener(listener);
  }

  /**
   * Remove a listener from the listener list.
   *
   * @param listener the listener to remove.
   */
  @Override
  public void removeMessageListener(MessageListener listener) {
    messageHandler.removeListener(listener);
  }

  /**
   * Notify listeners after setting the message.
   *
   * @param message the message to send.
   */
  @Override
  public void sendMessage(Message message) {
    messageHandler.sendMessage(message);
  }
}

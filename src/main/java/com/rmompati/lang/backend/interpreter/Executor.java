package com.rmompati.lang.backend.interpreter;

import com.rmompati.lang.backend.Backend;
import com.rmompati.lang.backend.interpreter.executors.StatementExecutor;
import com.rmompati.lang.intermediate.ICode;
import com.rmompati.lang.intermediate.ICodeNode;
import com.rmompati.lang.intermediate.SymTabStack;
import com.rmompati.lang.message.Message;
import com.rmompati.lang.message.MessageListener;
import com.rmompati.lang.message.MessageType;

/**
 * <h1>Executor</h1>
 *
 * <p>A backend component for processing and executing the source program.</p>
 */
public class Executor extends Backend {

  protected static int executionCount;
  protected static RuntimeErrorHandler errorHandler;

  static {
    executionCount = 0;
    errorHandler = new RuntimeErrorHandler();
  }

  /**
   * Constructor for subclasses.
   * @param parent the parent executor.
   */
  public Executor(Executor parent) {
    super();
  }

  /**
   * Process the intermediate code and the symbol table generated by the parser to execute the source program.
   *
   * @param iCode    the intermediate code.
   * @param symTabStack the symbol table stack.
   * @throws Exception if an exception occurs.
   */
  @Override
  public void process(ICode iCode, SymTabStack symTabStack) throws Exception {
    this.symTabStack = symTabStack;
    this.iCode = iCode;

    long startTime = System.currentTimeMillis();

    ICodeNode rootNode = iCode.getRoot();
    StatementExecutor statementExecutor = new StatementExecutor(this);
    statementExecutor.execute(rootNode);

    float elapsedTime = (System.currentTimeMillis() - startTime) / 1000f;
    int runtimeErrors = errorHandler.getErrorCount();

    // Send the interpreter summary.
    sendMessage(new Message(MessageType.INTERPRETER_SUMMARY, new Number[]{executionCount, runtimeErrors, elapsedTime}));
  }

  /**
   * Adds a lister to the listener list.
   *
   * @param listener the listener to add.
   */
  @Override
  public void addMessageListener(MessageListener listener) {
    messageHandler.addListener(listener);
  }

  /**
   * Remove a listener from the listener list.
   *
   * @param listener the listener to remove.
   */
  @Override
  public void removeMessageListener(MessageListener listener) {
    messageHandler.removeListener(listener);
  }

  /**
   * Notify listeners after setting the message.
   *
   * @param message the message to send.
   */
  @Override
  public void sendMessage(Message message) {
    messageHandler.sendMessage(message);
  }
}

package com.rmompati.lang.pascal.frontend;

import com.rmompati.lang.pascal.frontend.token.Token;

/**
 * <h1>Parser</h1>
 *
 * <p>A language-independent framework class. This abstract parser class will be implemented by language-specific
 * sub-classes.</p>
 * */
public abstract class Parser {

  /** The generated symbol table. */
  protected static SymTable symTable;
  static {
    symTable = null;
  }

  /** The scanner used with this parser. */
  protected Scanner scanner;
  /** The intermediate code generated by this parser. */
  protected ICode iCode;

  /**
   * Constructor
   *
   * @param scanner the scanner to be used with this parser.
   */
  protected Parser(Scanner scanner) {
    this.scanner = scanner;
    this.iCode = null;
  }

  /**
   * Parse a source program and generate the intermediate code and the symbol table.
   * To be implemented by a language-specific parser subclass.
   *
   * @throws Exception if an error occurs.
   */
  public abstract void parse() throws Exception;

  /**
   * Return the number of syntax errors found by the parser.
   * To be implemented by a language-specific parser subclass.
   *
   * @return the error count.
   */
  public abstract int getErrorCount();

  /**
   * Call the scanner's {@link Scanner#currentToken()} method.
   * @return the current token.
   */
  public Token currentToken() {
    return scanner.currentToken();
  }

  /**
   * Call the scanner's {@link Scanner#nextToken()} method.
   * @return the current token.
   * @throws Exception if an error occurs.
   */
  public Token nextToken() throws Exception {
    return scanner.nextToken();
  }
}
